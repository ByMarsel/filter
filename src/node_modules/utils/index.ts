import { uniqBy } from "lodash";
import { memoize } from "lodash";
import { FilterState } from "store/filter/types";
import { Pony, SelectedValue } from "types";
import { Range } from "store/filter/types";

enum CompareType {
  Equals,
  MoreOreEqual,
  LessOrEqual
}

export const uniqByMemorized = () => {
  const memo = memoize(uniqBy);
  let lastKey: any = null;
  return (it: any, fld: string) => {
    if (!lastKey) {
      lastKey = it;
    }
    if (lastKey !== it) {
      memo.cache.delete(lastKey);
      memo.cache.set(it, fld);
      lastKey = it;
    }
    return memo(it, fld);
  };
};

// Велосипед №287

function applySelector<TValue, TCompareVal>(
  selector: TValue | undefined,
  compareVal: TCompareVal,
  compareField: string,
  compareType: CompareType = CompareType.Equals
) {
  if (!selector) {
    return true;
  }
  switch (compareType) {
    case CompareType.Equals: {
      return selector === compareVal[compareField];
    }
    case CompareType.LessOrEqual: {
      return selector >= compareVal[compareField];
    }
    case CompareType.MoreOreEqual: {
      return selector <= compareVal[compareField];
    }
  }
}

function createCacheKey(query: FilterState) {
  let key = "";
  if (query.color) {
    key += query.color.value;
  }
  if (query.isNew) {
    key += query.isNew.value;
  }
  if (query.kind) {
    key += query.kind.value;
  }
  if (query.priceRange) {
    if (query.priceRange.from) {
      key += query.priceRange.from;
    }
    if (query.priceRange.to) {
      key += query.priceRange.to;
    }
  }
  return key;
}

const getSV = (val: SelectedValue | undefined) => val && val.value;
const getRVTo = (val: Range | undefined) => val && val.to;
const getRVFrom = (val: Range | undefined) => val && val.from;

export const filterMemorized = () => {
  const cache = {};
  const keys: string[] = [];

  return (query: FilterState, items: Pony[]) => {
    const key = createCacheKey(query);
    console.log(cache);
    if (key === "") {
      return items;
    }
    if (!cache[key]) {
      if (keys.length > 10) {
        const removedKey = keys.shift();
        if (removedKey) {
          delete cache[removedKey];
        }
      }
      keys.push(key);
      cache[key] = items.filter(
        x =>
          applySelector(getSV(query.color), x, "color") &&
          applySelector(getSV(query.kind), x, "kind") &&
          applySelector(getSV(query.isNew), x, "isNew") &&
          applySelector(
            getRVFrom(query.priceRange),
            x,
            "price",
            CompareType.MoreOreEqual
          ) &&
          applySelector(
            getRVTo(query.priceRange),
            x,
            "price",
            CompareType.LessOrEqual
          )
      );
    }

    return cache[key];
  };
};
