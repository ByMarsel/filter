import * as React from "react";
import { connect } from "react-redux";
import { FilterState } from "store/filter/types";
import { set as setFilter, clean as cleanFilter } from "store/filter/actions";
import { AppState } from "store";
import { Dispatch } from "redux";
import Dropdown from "components/drompdown";
import Button from "components/button";
import styled from "styled-components";
import { uniqByMemorized } from "utils";
import { Pony, SelectedValue } from "types";
import { close as closeFilter } from "store/catalog/actions";

interface StateProps extends FilterState {
  colors: SelectedValue[];
  kinds: SelectedValue[];
}

interface DispatchProps {
  setFilter: typeof setFilter;
  cleanFilter: typeof cleanFilter;
  closeFilter: typeof closeFilter;
}

const AbsoluteContainer = styled.div`
  position: absolute;
  left: 50%;
  margin-left: -450px;
  top: 10px;
  z-index: 50;
  width: 900px;
  background-color: white;
`;

const Wrapper = styled.div`
  display: flex;
  width: 100%;
  margin: 0 auto;
  justify-content: space-around;
  border: 1px solid grey;
  border-radius: 3px;
  min-height: 70px;
  align-items: center;
`;

const Input = styled.input`
  height: 50px;
  width: 100px;
`;

class Filter extends React.Component<StateProps & DispatchProps, FilterState> {
  constructor(props: StateProps & DispatchProps) {
    super(props);
    this.state = {
      color: this.props.color,
      isNew: this.props.isNew,
      priceRange: this.props.priceRange,
      kind: this.props.kind
    };
  }

  public render(): JSX.Element {
    const { priceRange } = this.state;
    const from = priceRange && priceRange.from;
    const to = priceRange && priceRange.to;
    return (
      <AbsoluteContainer>
        <Wrapper>
          <Dropdown
            defaultValueLabel={"Все"}
            selected={this.state.color}
            values={this.props.colors}
            onSelect={this.handleSelectColor}
          />
          <Dropdown
            defaultValueLabel={"Все"}
            selected={this.state.kind}
            values={this.props.kinds}
            onSelect={this.handleSelectKind}
          />
          <Dropdown
            defaultValueLabel={"Все"}
            selected={this.state.isNew}
            values={[{ id: "1", value: true, label: "Новинка" }]}
            onSelect={this.handleSelectIsNew}
          />
          <Input type="number" onChange={this.handleRangeFrom} value={from?from:''} />
          <Input type="number" onChange={this.handleRangeTo} value={to?to:''} />
          <Button onClick={this.handleSearch} label="Найти!" />
          <Button onClick={this.props.closeFilter} label="Х" />
        </Wrapper>
      </AbsoluteContainer>
    );
  }

  private handleSearch = () => {
    this.props.setFilter(this.state);
  };
  private handleSelectColor = (value: any) => {
    this.setState({
      color: value
    });
  };

  private handleSelectKind = (value: any) => {
    this.setState({
      kind: value
    });
  };

  private handleSelectIsNew = (value: any) => {
    this.setState({
      isNew: value
    });
  };

  private handleRangeFrom = (e: any) => {
    const range = this.state.priceRange;
    this.setState({
      priceRange: { from: e.target.value, to: range ? range.to : undefined }
    });
    e.preventDefault();
  };

  private handleRangeTo = (e: any) => {
    const range = this.state.priceRange;
    this.setState({
      priceRange: { from: range ? range.from : undefined, to: e.target.value }
    });
    e.preventDefault();
  };
}

const memoized = uniqByMemorized();

const mapStateToProps = (state: AppState) => ({
  ...state.filter,
  colors: memoized(state.catalog.items, "color").map(
    (x: Pony): SelectedValue => ({ id: x.id, value: x.color, label: x.color })
  ),
  kinds: memoized(state.catalog.items, "kind").map(
    (x: Pony): SelectedValue => ({ id: x.id, value: x.kind, label: x.kind })
  )
});

const mapDispatchToProps = (dispatch: Dispatch) => ({
  setFilter: (filter: FilterState) => dispatch(setFilter(filter)),
  cleanFilter: () => dispatch(cleanFilter()),
  closeFilter: () => dispatch(closeFilter())
});

export default connect<StateProps, DispatchProps, any>(
  mapStateToProps,
  mapDispatchToProps
)(Filter);
