import * as React from "react";
import { CatalogState } from "store/catalog/types";
import {
  show as showFilter,
  updateFilterOpenLink
} from "store/catalog/actions";
import { AppState } from "store";
import { connect } from "react-redux";
import { Dispatch } from "redux";
import Card from "components/card";
import styled from "styled-components";
import Filter from "containers/Filter";
import { filterMemorized } from "utils";

type StateProps = CatalogState;

interface DispatchProps {
  showFilter: typeof showFilter;
  updateFilterOpenLink: typeof updateFilterOpenLink;
}

interface WrapperProps {
  showFilter: boolean;
}

const Wrapper = styled.div`
  display: flex;
  flex-wrap: wrap;
  width: 900px;
  margin: ${(p: WrapperProps) => (!p.showFilter ? "0 auto" : "90px auto")};
  justify-content: center;
`;

const ItemWrapper = styled.div`
  margin: 10px 10px;
`;

class Catalog extends React.Component<StateProps & DispatchProps> {
  public componentDidMount() {
    if (
      window.location.pathname === this.props.filterOpenLink &&
      !this.props.isShowFilter
    ) {
      this.props.showFilter();
    }
  }

  public render(): JSX.Element {
    return (
      <>
        {this.props.isShowFilter && <Filter />}
        <Wrapper showFilter={this.props.isShowFilter}>
          {this.props.items.map(x => (
            <ItemWrapper>
              <Card key={x.id} {...x} />
            </ItemWrapper>
          ))}
        </Wrapper>
        <Wrapper showFilter={false}>
          <a href={"/static"}>Любая ссылка</a>
        </Wrapper>
      </>
    );
  }
}

const memorizedFilter = filterMemorized();

const mapStateToProps = (state: AppState) => ({
  items: memorizedFilter(state.filter, state.catalog.items) || [],
  isShowFilter: state.catalog.isShowFilter,
  filterOpenLink: state.catalog.filterOpenLink
});

const mapDispatchToProps = (dispatch: Dispatch) => ({
  showFilter: () => dispatch(showFilter()),
  updateFilterOpenLink: (link: string) => dispatch(updateFilterOpenLink(link))
});

export default connect<StateProps, DispatchProps, any>(
  mapStateToProps,
  mapDispatchToProps
)(Catalog);
