import * as React from "react";
import { CatalogState } from "store/catalog/types";
import {
  show as showFilter
} from "store/catalog/actions";
import { AppState } from "store";
import { connect } from "react-redux";
import { Dispatch } from "redux";
import Card from "components/card";
import styled from "styled-components";
import Filter from "containers/Filter";
import { filterMemorized } from "utils";

type StateProps = CatalogState;

interface DispatchProps {
  showFilter: typeof showFilter;
}

interface WrapperProps {
  showFilter: boolean;
}

const Wrapper = styled.div`
  display: flex;
  flex-wrap: wrap;
  width: 900px;
  margin: ${(p: WrapperProps) => (!p.showFilter ? "0 auto" : "90px auto")};
  justify-content: center;
`;

const ItemWrapper = styled.div`
  margin: 10px 10px;
`;

class Catalog extends React.Component<StateProps & DispatchProps> {
  public componentDidMount() {
    window.addEventListener("click", this.showFilter);
  }

  public componentWillMount() {
    window.removeEventListener("click", this.showFilter);
  }
  public render(): JSX.Element {
    return (
      <>
        {this.props.isShowFilter && <Filter />}
        <Wrapper showFilter={this.props.isShowFilter}>
          {this.props.items.map(x => (
            <ItemWrapper>
              <Card key={x.id} {...x} />
            </ItemWrapper>
          ))}
        </Wrapper>
      </>
    );
  }

  private showFilter = (e: any) => {
    console.log(e.target.tagName);
    if (e.target.tagName === "A") {
      this.props.showFilter();
    }
  };
}

const memorizedFilter = filterMemorized();

const mapStateToProps = (state: AppState) => ({
  items: memorizedFilter(state.filter, state.catalog.items) || [],
  isShowFilter: state.catalog.isShowFilter
});

const mapDispatchToProps = (dispatch: Dispatch) => ({
  showFilter: () => dispatch(showFilter())
});

export default connect<StateProps, DispatchProps, any>(
  mapStateToProps,
  mapDispatchToProps
)(Catalog);
